[ Java Script ]
    HTML : 하이퍼 텍스트 마크업 언어 : 웹 문서의 뼈대
    CSS : 케스켘이드 스타일 시트 언어 : 웹 문서의 디자인
    JS : 자바 스크립트 : 웹 문서의 동적 역할

    1. 사용처 
        : 웹 프로그래밍, 서버 개발, 소프트웨어 개발
    2. 라이브러리 종류 
        font : REACT, ANGULAR(지원 중단), VUE.JS, JQUERY
        back : NODE.JS
        app : REACT NATIVE(지원 중단)
        REACT NATIVE WEB : web/app 동시 개발
        software : NW.JS
    3. 사용법
        - 주의 : HTML 없이 JS 파일만으로 실행 X
        - 방법 1
                1. HTML 파일 내 <body> 마크업 안에서 가장 아래
                2. <script> 마크업을 이용하여 JS 코드를 작성
        - 방법 2
                1. JS 파일을 생성하여 JS 코드를 작성
                2. HTML 파일 내 <body> 마크업 안에서 가장 아래
                3. <script src="JS파일 경로></script>
    4. 주석
        /* 여러줄 주석 */
        // 한 줄 주석

[ JS 실행 확인 ]
    크롬 > f12 
    > sources tab에서 .js 파일 여부 확인
    > console tab에서 .js 출력 메세지 확인

[용어]
    1. 데이터(Data, 자료) 
            사실이나 값을 그대로 나타낸 객관적 자료
    2. 리터럴(literal)
            프로그래밍 언어에서 소스코드에 직접 표현한 값
            개발자가 사용할 수 있도록 미리 정해진 값을 넣어 놓음 (상수 = 수정할 수 없는 고정 값)
            자료의 타입/종류 >> 자료형
    3. 자료형
            프로그래밍 언어에서 자료들을 분류하는 방법 >> 데이터 처리의 효율화

[ JS 자료형 ]
    1. 숫자형(Number)           : 10(정수), 3.14(실수)
    2. 문자열(String)           : "", ''
    3. 불리언(Boolean)          : true, false
    4. 배열(Array)              : [ 자료, 자료, 자료, ]
    5. 객체(Object)             : { 속성명 : 자료, 속성명 : 자료 } : 이름(속성명)과 자료를 한 쌍으로
    6. 특수 : undefined, null   : undefined-자료가 할당되지 않은 상태 / null-자료가 존재하지 않음
----------------------------
[ 숫자형 ]
    정수 : 소수점이 없는 숫자
    실수 : 소수점이 있는 숫자
            실수는 정밀한 계산이 불가 : 부동소수점 >> 별도의 정밀한 함수가 필요
[ 문자열 ] 
    '' or ""로 묶음
    이스케이프 문자(특수기호)
        \ddd 8진수
        \xddd 16진수
[ 논리형 boolean ]
    true false
[ 배열 array ]
    하나의 변수, 자료에 여러 자료를 저장하는 방법 
    [ , , , , ...]
    - 인덱스(index) 
        0 ~ n-1
        자료들이 저장된 순서
    - 배열 호출 
        console.log(Array); >> 배열의 모든 값이 출력
        console.log(Array[index]); >> 배열에 해당 index의 요소가 출력
    - 배열 수정
        전체
            변수명 = [ , , , ]; >> 새로운 자료 입력
        특정요소
            변수명[index] = ""      
    - 배열 내 요소 추가
        변수명.push(새로운 값) >> 가장 마지막에 추가됨
    - 배열 내 요소 삭제
        변수명.splice(index, ea)
    - 배열 내 특정 요소 찾기
        변수명.indexOf(찾을값) >> 있으면 index 번호를, 없으면 -1을 반환
    - 배열의 길이
        변수명.length : 자료의 개수를 반환
[ undefined / null ]
    undefined : 데이터의 자료형이 정의되지 않은 상태
    null : 데이터 값이 유효하지 않은 상태
[ 템플릿 리터널 ]
    백틱( `` ) 이용 >> ` ${} ${} `
    문자와 변수, 식을 섞어서 하나의 문자열을 만드는 표현 형식

키워드 : 미리 정해진 기능이 포함된 특수문자/문자열
    [], {}, console, Number, String, if, for .etc

[ 변수와 상수 ]
    - 변수
        let 변수명 = 자료;
        자료 수정 가능
    - 상수
        const 상수명 = 자료;
        자료 수정 불가능

[ 출력함수 ]
    - console.log(출력할 자료 or 변수명)
        ctrl + shift + j = f12 console 에 출력
    - alert( 출력할 자료 or 변수명)
        페이지 접근 시 알림(alert) 창으로 출력

[ 입력 함수 ]
    - confirm("메세지")
        확인(true)/취소(flase) 알림 창  
    - prompt("메세지")
        텍스트 입력 알림 창 출력
    ※ [ let 변수명 = prompt("텍스트를 입력해주세요") ] 와 같은 형식으로 작성

[ 자동 형 변환 ]
    1. 문자열 숫자 * 1 = 숫자형 
    2. 문자열 + 숫자형 >> 자동 문자열 
        +(연결 연산자)

[ 자료형 변환 함수 ]
    1. Nuber()
        string을 숫자열로 변환
        문자를 숫자로 바꾸려하면 NaN(not a number) 오류 발생
    2. parseInt()
        정수 숫자 변환
    3. parseFloat()
        실수 숫자로 변환
    4. String()
        문자열 변환
    5. Boolean()
        문자열을 논리형으로 변환

[ 연산자 ]
    1. 산술연산자
        하나의 연산결과를 숫자로 반환
        +
        -
        *
        /
        % : 나머지
    2. 연결연산자
        연산에 문자열이 포함될 때 연결 연산
        +
    3. 비교 연산자 
        하나의 연산결과를 논리(true/false) 값으로 반환
        > 초과
        < 미만
        >= 이상
        <= 이하
        == (값이) 같다
        != 같지 않다
        === (값과 자료형이) 같다
        !== 같지 않다.
    4. 논리 연산자 
        결과를 논리 값으로 반환
        && and 연산자
        || or 연산자
        !  not 연산자
    5. 대입 연산자 (할당 연산자, 복합대입 연산자)
        변수 저장에 사용되는 기호
        = 오른쪽 데이터를 왼쪽에 할당
        += 오른쪽 데이터를 왼쪽 데이터에 더한 후 대입
        -= 오른쪽 데이터를 왼쪽 데이터에서 뺀 후 대입
        *= 오른쪽 데이터를 왼쪽 데이터에 곱한 후 대입
        /= 오른쪽 데이터를 왼쪽 데이터에 나눈 후 대입
        %= 왼쪽 나누기 오른쪽의 나머지를 대입
    6. 증감 연산자
        ++ : 1 증가
        -- : 1 감소
    7. 삼항 연산자
        항이 3개
        (1)조건 ? (2)true : (3)flase 

[ 조건문 ]
    특정 조건에 따라 명령을 순서대로 처리
    복잡한 조건 처리 가능
    if 내에서 선언 가능
    중첩 가능
    ========
    if (조건) {
        true; }
    else {
        false; }
    =======
    if (조건1) {
        true; }
    elseif (조건2) {
        true; }
    elseif (조건3) {
        true; }
    ....
    else { flase; };