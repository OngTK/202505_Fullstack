[ Java Script ]
    HTML : 하이퍼 텍스트 마크업 언어 : 웹 문서의 뼈대
    CSS : 케스켘이드 스타일 시트 언어 : 웹 문서의 디자인
    JS : 자바 스크립트 : 웹 문서의 동적 역할

    1. 사용처 
        : 웹 프로그래밍, 서버 개발, 소프트웨어 개발
    2. 라이브러리 종류 
        font : REACT, ANGULAR(지원 중단), VUE.JS, JQUERY
        back : NODE.JS
        app : REACT NATIVE(지원 중단)
        REACT NATIVE WEB : web/app 동시 개발
        software : NW.JS
    3. 사용법
        - 주의 : HTML 없이 JS 파일만으로 실행 X
        - 방법 1
                1. HTML 파일 내 <body> 마크업 안에서 가장 아래
                2. <script> 마크업을 이용하여 JS 코드를 작성
        - 방법 2
                1. JS 파일을 생성하여 JS 코드를 작성
                2. HTML 파일 내 <body> 마크업 안에서 가장 아래
                3. <script src="JS파일 경로></script>
    4. 주석
        /* 여러줄 주석 */
        // 한 줄 주석

[ JS 실행 확인 ]
    크롬 > f12 
    > sources tab에서 .js 파일 여부 확인
    > console tab에서 .js 출력 메세지 확인

[용어]
    1. 데이터(Data, 자료) 
            사실이나 값을 그대로 나타낸 객관적 자료
    2. 리터럴(literal)
            프로그래밍 언어에서 소스코드에 직접 표현한 값
            개발자가 사용할 수 있도록 미리 정해진 값을 넣어 놓음 (상수 = 수정할 수 없는 고정 값)
            자료의 타입/종류 >> 자료형
    3. 자료형
            프로그래밍 언어에서 자료들을 분류하는 방법 >> 데이터 처리의 효율화

[ JS 자료형 ]
    1. 숫자형(Number)           : 10(정수), 3.14(실수)
    2. 문자열(String)           : "", ''
    3. 불리언(Boolean)          : true, false
    4. 배열(Array)              : [ 자료, 자료, 자료, ]
    5. 객체(Object)             : { 속성명 : 자료, 속성명 : 자료 } : 이름(속성명)과 자료를 한 쌍으로
    6. 특수 : undefined, null   : undefined-자료가 할당되지 않은 상태 / null-자료가 존재하지 않음
----------------------------
[ 숫자형 ]
    정수 : 소수점이 없는 숫자
    실수 : 소수점이 있는 숫자
            실수는 정밀한 계산이 불가 : 부동소수점 >> 별도의 정밀한 함수가 필요
[ 문자열 ] 
    '' or ""로 묶음
    이스케이프 문자(특수기호)
        \ddd 8진수
        \xddd 16진수
[ 논리형 boolean ]
    true false
[ 배열 array ]
    하나의 변수, 자료에 여러 자료를 저장하는 방법 
    [ , , , , ...]
    - 인덱스(index) 
        0 ~ n-1
        자료들이 저장된 순서
    - 배열 호출 
        console.log(Array); >> 배열의 모든 값이 출력
        console.log(Array[index]); >> 배열에 해당 index의 요소가 출력
    - 배열 수정
        전체
            변수명 = [ , , , ]; >> 새로운 자료 입력
        특정요소
            변수명[index] = ""      
    - 배열 내 요소 추가
        변수명.push(새로운 값) >> 가장 마지막에 추가됨
    - 배열 내 요소 삭제
        변수명.splice(index, ea)
    - 배열 내 특정 요소 찾기
        변수명.indexOf(찾을값) >> 있으면 index 번호를, 없으면 -1을 반환
    - 배열의 길이
        변수명.length : 자료의 개수를 반환
[ undefined / null ]
    undefined : 데이터의 자료형이 정의되지 않은 상태
    null : 데이터 값이 유효하지 않은 상태
[ 템플릿 리터널 ]
    백틱( `` ) 이용 >> ` ${} ${} `
    문자와 변수, 식을 섞어서 하나의 문자열을 만드는 표현 형식

키워드 : 미리 정해진 기능이 포함된 특수문자/문자열
    [], {}, console, Number, String, if, for .etc

[ 변수와 상수 ]
    - 변수
        let 변수명 = 자료;
        자료 수정 가능
    - 상수
        const 상수명 = 자료;
        자료 수정 불가능

[ 출력함수 ]
    - console.log(출력할 자료 or 변수명)
        ctrl + shift + j = f12 console 에 출력
    - alert( 출력할 자료 or 변수명)
        페이지 접근 시 알림(alert) 창으로 출력

[ 입력 함수 ]
    - confirm("메세지")
        확인(true)/취소(flase) 알림 창  
    - prompt("메세지")
        텍스트 입력 알림 창 출력
    ※ [ let 변수명 = prompt("텍스트를 입력해주세요") ] 와 같은 형식으로 작성

[ 자동 형 변환 ]
    1. 문자열 숫자 * 1 = 숫자형 
    2. 문자열 + 숫자형 >> 자동 문자열 
        +(연결 연산자)

[ 자료형 변환 함수 ]
    1. Nuber()
        string을 숫자열로 변환
        문자를 숫자로 바꾸려하면 NaN(not a number) 오류 발생
    2. parseInt()
        정수 숫자 변환
    3. parseFloat()
        실수 숫자로 변환
    4. String()
        문자열 변환
    5. Boolean()
        문자열을 논리형으로 변환

[ 연산자 ]
    1. 산술연산자
        하나의 연산결과를 숫자로 반환
        +
        -
        *
        /
        % : 나머지
    2. 연결연산자
        연산에 문자열이 포함될 때 연결 연산
        +
    3. 비교 연산자 
        하나의 연산결과를 논리(true/false) 값으로 반환
        > 초과
        < 미만
        >= 이상
        <= 이하
        == (값이) 같다
        != 같지 않다
        === (값과 자료형이) 같다
        !== 같지 않다.
    4. 논리 연산자 
        결과를 논리 값으로 반환
        && and 연산자
        || or 연산자
        !  not 연산자
    5. 대입 연산자 (할당 연산자, 복합대입 연산자)
        변수 저장에 사용되는 기호
        = 오른쪽 데이터를 왼쪽에 할당
        += 오른쪽 데이터를 왼쪽 데이터에 더한 후 대입
        -= 오른쪽 데이터를 왼쪽 데이터에서 뺀 후 대입
        *= 오른쪽 데이터를 왼쪽 데이터에 곱한 후 대입
        /= 오른쪽 데이터를 왼쪽 데이터에 나눈 후 대입
        %= 왼쪽 나누기 오른쪽의 나머지를 대입
    6. 증감 연산자
        ++ : 1 증가
        -- : 1 감소
    7. 삼항 연산자
        항이 3개
        (1)조건 ? (2)true : (3)flase 

[ 조건문 ]
    특정 조건에 따라 명령을 순서대로 처리
    복잡한 조건 처리 가능
    if 내에서 선언 가능
    중첩 가능
    ========
    if (조건) {
        true; }
    else {
        false; }
    =======
    if (조건1) {
        true; }
    elseif (조건2) {
        true; }
    elseif (조건3) {
        true; }
    ....
    else { flase; };

[ 반복문 ]
    특정한 조건의 노리 결과가 true 일 때 특정한 명령어들을 반복처리
    ex.
        for (let i = 0 ; i <= 3 , i++) {} 

    1. 형태
        for ( 초기값 ; 조건문 ; 증감식) {실행문}
    2. 문법
        2.1. 초기값 : 반복할 때 반복의 카운터/횟수를 체크하는 변수의 처음값
        2.2. 조건문 : 반복 실행문이 실행되는 조건으로 true 이면 { } 실행, 아니면 종료
        2.3. 증감식 : 반복 변수의 증가 혹은 감소 변화 연산식
        2.4. 실행문 : 조건이 true일때 반복실행되는 코드
    3. 순서
        1. 초기값 >> 조건문 >(true)> 실행문 > 증감식 > 
                    조건문 >(true)> 실행문 > 증감식 >
                    ....
                    조건문 >(false)> 종료
    4. 배열과 반복문의 관계
        4.1. 배열의 인덱스는 순차적인 순서 번호가 존재
        4.2. 배열의 길이 : 변수명.lenght
        4.3. 배열의 마지막 인데스 : 변수명.lenght-1

[ 반복문 제어 키워드 ]
    1. continue 
        가장 가까운 for문의 증감식으로 이동
        for () {
            if (true) {continue;}; >> true일 경우, 아래 코드를 실행하지 않고 for 문의 증감식으로 이동!!
            console.log;
        };
    2. break
        가장 가까운 for문의 종료
        for () {
            if (true) {break;}; >> true일 경우, // 반복문 자체를 종료
        };
    3. 무한 루프
        for( ; ; ){    // for 안에 아무것도 넣지 않음 or 조건식, 증감식이 무조건 true
            if-break로 무한 루프를 조절 
        } ;

[ 프로그래밍 관점 ]
    - 프로그래밍 구성을 하기 위한 접근 방식
    1. 절차지향 프로그래밍
        ex. C언어
        - 함수(절차)를 이용한 순서가 정해진 작업
        - 코드가 위에서 아래로 순차적으로 실행 >> 단순
    2. 객체지향 프로그래밍
        ex. Java, Java Script, Python, C++
        - 객체(데이터/기능)을 '하나로 묶어서' 처리하는 작업
        - 코드의 재사용, 확장성에 중점을 둠 >> 다소 복잡

[ 객체 ]
    1. 정의
        - 객체, Object : 주체(나, 대상)가 아닌 다른 실체(타인)
        - 주체, Subject : '나/대상'이라는 실체, 중심
    2. 생활 속 객체 : 모든 것
        - 어떠한 대상을 정의할 수 있는 모든 것

        개발자(주체자) 관점에서 컴퓨터 속(객체)를 만든다.

[ JS 객체 ]
    1. 종류
        (1) 클래스 기반의 객체
            class : 객체를 만들기 위한 틀, 설계도, 자바에서는 필수.
        (2) 클래스가 없는 객체
            { } 를 이용
    2. 배열과 객체의 차이점
        (1) 배열
            [ ], 인덱스, 자료 순서 有, 목록
        (2) 객체
            { }, 속성명, 자료 순서 無, 정보
    ※ 변수
        배열과 객체 자료를 저장하는 메모리 공간
    ※ 예시
        정보를 만들떼는 객체화하고, 동일한 정보(객체)들을 여러개  묶을 때는 배열
        const 제품목록 = [ {name : '콜라', price : 1000} , {name : '사이다', price : 1200} ]
    3. 객체 선언시 속성(properties) 구성
        속성명과 자료를 한 쌍(entry)으로 하고, 쉼표로 구분하여 여러 쌍(entry)을 { } 로 감싼다.
        속성명은 임의로 작성하되, 특수문자가 포함된 경우 text로 묶는다.
        속성명은 자료를 식별하는 목적이므로 중복 불가
    4. 객체 호출
        console.log( 변수명 );                      : 전체 호출
        console.log( 변수명.속성명 );                : 특정 속성의 자료 호출 / 접근·도트 연산자 >> 특정 위치로 이동
        console.log( 변수명['속성명2'] );            : 속성명에 특수문자 포함 or 변수일 경우 
        console.log( Object.keys( 변수명 ) );       : 객체 내 모든 속성명(key)를 배열로 반환
        console.log( Object.values( 변수명 ) );     : 객체 내 모든 자료(value)를 배열로 반환
        console.log( Object.entries( 변수명 ) );    : 객체 내 모든 entry를 배열로 반환
    5. 객체 내 속성 추가·삭제·수정
        추가 
            변수명.속성명 = 자료
            변수명['속성명'] = 자료
        수정 : (동일)
        삭제  
            delete 변수명.속성명
        확인
            속성명 in 변수명 >> true or false
    6. 객체 속성내 자료
        변수 값, 리터럴 값, 객체, 배열, 함수 등 모든 자료 대입 가능
    7. 배열과 객체의 조합
        공통점 : 여러 개의 자료를 하나의 자료로 묶는다.
        차이점 : 배열-인덱스로 자료를 구분 vs 객체-속성명으로 자료 구분
        
        서로 다른 의미의 자료를 가질 때는 객체    
        동일한 자료의 의미를 가질 때는 배열

[ 함수 Function ]
    1. 정의
        함(상자/블럭) + 수(code/명령어) 
        특정한 {} 안에 미리 정의된 코드
    2. 목적
        미리 정의된 코드를 재사용
    3. 함수 종류
        - 라이브러리
            미리 만들어진 함수
        - 정의함수
            나(개발자)가 만든 함수
    4. 함수도 JS에서는 자료형
    5. JS함수 표현 방법
        - 선언적 함수
            선언 키워드를 이용하여 함수를 만드는 방법
            function 함수명(){};
        - 익명 함수
            함수명 없이 정의하는 방법
            function (){};
        - 화살표(람다식) 함수
            선언키워드와 함수명 없이 정의하는 방법
            ( ) => {}       
    6. 함수 만드는 방법
        function    : 
        함수명       : 
        ()          : 매개변수 (함수 안으로 들어오는 데이터)
                인수   : 들어가는 수
                인자값 : 들어온 수
        {}          : 함수가 실행될 때 처리되는 명령어들
        return      : 함수가 종료되면서 함수를 호출했던 곳으로 반환되는 값 (필수 X)
    7. 함수 호출
        - at JS
            함수명();
            함수명(인수, ...) : ,로 구분하여 정해진 매개변수를 함수에 대입
        - at HTML
            <마크업 이벤트속성='함수명()'>

[ dom 객체 ]
    dom 객체 : 
        - JS 내장 객체 
        1. 정의
            Document Object Model : 문서 객체 모델 
            HTML을 객체로 다루기 위한 내장 객체
        2. 내장 객체
            document
        3. 주요 속성
            (1) document.write('출력 내용')         : HTML에 출력하는 함수
            (2) document.querySelector('선택자')    : HTML에 지정한 선택자를 JS 객체로 반환하는 함수
                    * 선택자 : 마크업명 / .class명 / #ID명 / 부모 > 자식 /
            (3) document.querySelectorAll('선택자') : HTML에 지정한 선택자 모두를 JS 객체를 배열로 반환하는 함수
            (4) dom객체.innerHTML                   : 마크업 내 html을 호출하는 속성
                    <마크업> innerHTML <마크업>
            (5) dom객체.value                       : value 값을 JS 객체로 가져옴
                    <마크업 value=""> 
                    ex. input, select, textarea etc.
            (6) dom객체.style                       : 마크업 내 style CSS 요소 대입
            (7) dom객체.style.css속성명              : 마크업 내 styel CSS 요소 추가
            (8) dom객체.classList                   : 마크업 내 적용된 class들을 반환
                    dom객체.classList.add('class명')
                    dom객체.classList.remove('class명') 
                    dom객체.classList.toggle('class명')   : 마크업 내 지정 클래서가 없으면 추가, 있으면 삭제
                    dom객체.classList.contains('class명') : 마크업 내 지정 클래스가 있는지 확인 > true/flase
            (9) dom객체.src
            (10) dom객체.remove
            (11) 마크업.files[0]  : 첨부파일의 첫번째 파일 객체를 가져옴
                    <input type='files'>
                    [ + 파일객체를 URL 주소로 만들어주는 함수 ]
                    URL.createObjectURL(마크업.files[0])

[ 날짜/시간 관련 객체]
    new Date() = 현재 시스템(PC의 날짜와 시간을 반환)
        1. 년도 
            let year = new Date().getFullYear()
        2. 달
            let month = new Date().getMonth() + 1 
                1월이 [0]부터 시작하므로 +1 필수
            month = month > 9 ? month : `0${month}`     
                1~9월 일 경우 앞에 0이 표시되어 보이게
        3. 일
            let day = new Date().getDate()        
            getDate(OO일)
        4. 요일 
            getDay (일요일 0 ~ 토요일 6), 

        let pdate = `${year}-${month}-${day}`

[웹스토리지]
    - 웹 브라우저 F12 > application tab > local/sesssion strorage
    - 도메인 별로 웹스토리지가 할당

    1. 종류
        (1) sessionStorage : 브라우저가 실행되는 동안에만 저장, 브라우저를 닫으면 데이터가 사라짐
            - 일회성 정보, 이전 페이지 기록
        (2) localStorage : 사용자가 직접 삭제하거나 브라우저 캐시, 쿠키 등을 청소하지 않는 한 영구 저장
            - 설정 정보, 팝업창(다시 보지 않기), 테마, 자동로그인 etc
    2. 사용법
        sessionStorage 객체
        localStorage 객체

        (1) 자료 대입
            sessionStorage.setItem( '속성명/key' , '값/value' ); 
        (2) 자료 호출
            sessionStorage.getItem ( '속성명/key' );
                속성이 존재하지 않으면, null / 존재하면 value를 반환
        (3) 자료 삭제
            sessionStorage.removeItem( '속성명/key' );
                속성만 삭제
            localStorage.clear(); 
                전체삭제
        * 속성명/key : only String
        * value : 리터럴 자료만 가능 / 객체, 배열은 불가능
         
[JSON]
    자바스크립트 객체 문법의 형식 / JavaScript Object Notation
        - 자바객체를 문자열타입이지만 객체형식(모양)으로 표현한 것
        - 3 : 숫자타입, 숫자모양 vs "3" : 문자열타입, 숫자모양
        - { age : 40 } 객체타입, 객체모양 vs "{age:40}" 문자열타입, 객체모양
        - Storage, HTTP  : 객체지향 X, 문자열과 바이트만 전송,
                            따라서 [객체 > 문자열] >> [문자열 > 객체] 로의 타입변환이 필요

    1. 사용법
        (1) JSON.stringify (자료);  : 해당 자료를 문자열 타입으로 반환
        (2) JSON.parse(자료);       : 해당 자료를 JS 타입으로 반환
    2. 활용처
        (1) 웹스토리지( JWT )
            let 배열변수 = []
            localStorage.setItem( '속성명', JSON.stringify(배열변수) );
            JSON.parse( localStorage.getItem( '속성명' ) )
        (2) 비동기통신(외부페이지와)